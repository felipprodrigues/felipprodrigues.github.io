- const headerTitle  = [ `Front End Developer Intern`, `Freelance Front End Developer`, `Freelance Front End Developer`, `Freelance Front End Developer` ];
- const headerSubtitle  = [ `Eventene`, `Camelias Produtos e Serviços`, `Tainá's Website`, `Theater Themed Template` ];
- const tabsItems = [ `_eventene.jade`, `_camelias-produtos-e-serviços.jade`, `_tainas-website.jade`,  `_theater-themed-template.jade` ];
- const tabsAttributes = [ 'tabOne', 'tabTwo', 'tabThree', 'tabFour' ];
- const conditionalAttributes =  { one: 'tabOne', two: 'tabTwo', three: 'tabThree', four: 'tabFour' };
- const eventList = [ 'Collaborate with the stack (Ruby, TypeScript, Vue, React);', 'Closely collaborate with the lead team designer to implement new features in the design system;', 'Streamline Webforms’ UI documentation in isolation for React’s Storybook;', 'Fix and update UI’s bugs in Webforms', 'Update the Ruby on Rails running app;', 'Document and update styles and components;', 'Implement newly designed components;', 'Refactor based on the Atomic Design Principle and BEM organizing structure;', 'Work in different ecosystems;', 'Deployment on GitHub' ]
- const camList = [ 'Full implementation of HTML and CSS structures based on the BEM methodology;', 'Creation of modular and responsive application;', 'GitHub based organization and project deployment' ]
- const tanList = [ 'Creation of modular and responsive application;', 'Organized based on BEM methodology;', 'GitHub based organization and project deployment' ];
- const themeList = [ 'Setup and Creation of GitHub repository;', 'Creation of modular and responsive web application;', 'Code structure based on BEM methodology;' ];
- const pageTags = [ 'HTML(PUG)', `CSS(SCSS)`, 'Vanilla JavaScript' ];
- const sourceTags = [ 'Git', `Shopify's Liquid`, 'Jekyll', 'Jquery', 'React' ];


.resume__container
  aside.aside
    ul.aside__list
      for icon, slug in public.resume._data
        li.aside__elements
          a.aside__button(data-aside="#{ icon.attribute }")
            svg.aside__icons
              use(xlink:href="assets/defs.svg#icon-#{ icon.icon }")

  nav.tabs
    ul.list
      each att, i in tabsAttributes
        li.list__items
          a.tabs__holder(data-trigger="#{att}")
            span.tabs__item #{ tabsItems[i] }
            svg.tabs__icon
              use(xlink:href="assets/defs.svg#icon-close")

  .card
    .card__holder(data-panel="files")

      each att, i in tabsAttributes
        .card__holder--within(data-preview="#{att}")
          .card__header
            h1.card__title
              span.card__items--faded ﹤h1﹥
              | #{ headerTitle[i] }
              span.card__items--faded ﹤/h1﹥
            h3.card__subtitle
              span.card__items--faded ﹤h3﹥
              | #{ headerSubtitle[i] }
              span.card__items--faded ﹤/h3﹥
          if att === conditionalAttributes.one
            .card__qualifiers
              span.card__comment.is-commented-out // Key Qualifications and Responsibilities
              ul.card__list
                li.card__items--faded ﹤ul﹥
                each items in eventList
                  li.card__items ﹤li﹥
                    | #{ items }
                li.card__items--faded ﹤/ul﹥
          else if att === conditionalAttributes.two
            .card__qualifiers
              span.card__comment.is-commented-out // Key Qualifications and Responsibilities
              ul.card__list
                li.card__items--faded ﹤ul﹥
                each items in camList
                  li.card__items ﹤li﹥
                    | #{ items }
                li.card__items--faded ﹤/ul﹥
          else if att === conditionalAttributes.three
            .card__qualifiers
              span.card__comment.is-commented-out // Key Qualifications and Responsibilities
              ul.card__list
                li.card__items--faded ﹤ul﹥
                each items in tanList
                  li.card__items ﹤li﹥
                    | #{ items }
                li.card__items--faded ﹤/ul﹥
          else if att === conditionalAttributes.four
            .card__qualifiers
              span.card__comment.is-commented-out // Key Qualifications and Responsibilities
              ul.card__list
                li.card__items--faded ﹤ul﹥
                each items in themeList
                  li.card__items ﹤li﹥
                    | #{ items }
                li.card__items--faded ﹤/ul﹥

    //=  BUTTONS ====================================================================================
    .card__holder.has-center-block.is-wide.no-space-out(data-panel="search")
      //- a(href="path_to_file" download="proposed_file_name").card__button #{ headerVar.download }
        svg
          use(xlink:href="assets/defs.svg#icon-download")

    .card__holder(data-panel="source")
      .card__header
        //- h1.card__title #{ headerVar.source }
        p.card__text This projects runs on
          each tags in pageTags
            small.tags #{ tags }
        p.card__text but not only I also have experience working with
          each tags in sourceTags
            small.tags #{ tags }

    .card__holder(data-panel="debugger")
      .card__header
        h1.card__title Debugger Engine

    .card__holder(data-panel="extension")
      p.card__text Ok, Ok.. I know it may be a little boring to be inspecting the page and all that but I have a tip for you.
      p.card__text So, instead of checking the repository of this project, which is this one by the way, you can directly visit the root code of this website by simply using this link
      a.card__text(href="https://github1s.com/felipprodrigues/felipprodrigues.github.io" target="_blank") URL
      p.card__text and you'll be able to check the live source code.








